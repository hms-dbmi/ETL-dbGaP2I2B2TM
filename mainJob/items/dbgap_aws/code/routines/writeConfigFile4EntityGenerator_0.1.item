package routines;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class writeConfigFile4EntityGenerator {

	public static void writeConfig(String configPath, String configFileName,String dataPath,String studyName){
		String fileName = configPath+configFileName;
		
		createDirIfNotExists(configPath);
		createDirIfNotExists(dataPath+"COMPLETED/");
		
		writeLineToFile(fileName,"# URI to File or Directory that contains data to be loaded", false);
		writeLineToFile(fileName,"filename="+dataPath,true);
		writeLineToFile(fileName,"# URI to Mapping file",true);
		writeLineToFile(fileName,"mappingfile="+dataPath+"MAPPING/built-mapping.csv",true);
		writeLineToFile(fileName,"# URI to Patient Mapping file",true);
		writeLineToFile(fileName,"patientmappingfile="+dataPath+"MAPPING/mapping.csv.patient",true);
		writeLineToFile(fileName,"# Location Table Entity files will be written to.",true);
		writeLineToFile(fileName,"writedestination="+dataPath+"COMPLETED/",true);
		writeLineToFile(fileName,"# Flag to skip mapping headers",true);
		writeLineToFile(fileName,"skipmapperheader=N",true);
		writeLineToFile(fileName,"# Flag to skip data headers",true);
		writeLineToFile(fileName,"skipdataheader=N",true);
		writeLineToFile(fileName,"# The data seperator for data file(s)",true);
		writeLineToFile(fileName,"datadelimiter=,",true);
		writeLineToFile(fileName,"# Flag that contains mapping seperator.",true);
		writeLineToFile(fileName,"mappingdelimiter=,",true);
		writeLineToFile(fileName,"# Character used for quoted strings in data file",true);
		writeLineToFile(fileName,"mappingquotedstring=\"",true);
		writeLineToFile(fileName,"# Short Name of Trial",true);
		writeLineToFile(fileName,"sourcesystemcd="+studyName,true);
		writeLineToFile(fileName,"",true);
		writeLineToFile(fileName,"## Sequencers. Turn to N if you want to perserve the keys used to sequence columns",true);
		writeLineToFile(fileName,"# Sequence master switch.  Turn to N to not perform any sequencing.",true);
		writeLineToFile(fileName,"sequencedata=Y",true);
		writeLineToFile(fileName,"# Instance num switch.  Turn to N to not perform any sequencing.",true);
		writeLineToFile(fileName,"sequenceinstance=Y",true);
		writeLineToFile(fileName,"# Patient num switch.  Turn to N to not perform any sequencing.",true);
		writeLineToFile(fileName,"sequencepatient=Y",true);
		writeLineToFile(fileName,"# Concept_cd switch.  Turn to N to not perform any sequencing.",true);
		writeLineToFile(fileName,"sequenceconcept=Y",true);
		writeLineToFile(fileName,"# encounter_num switch.  Turn to N to not perform any sequencing.",true);
		writeLineToFile(fileName,"sequenceencounter=Y",true);
		
	}
	
	private static void createDirIfNotExists(String dirPath){
    	if(!new File(dirPath).exists())
        {
            // CrÃ©er le dossier avec tous ses parents
    		System.out.println("Creating Directory for pos file ==> " + dirPath);
            new File(dirPath).mkdirs();
 
        }
    }
	
	private static void writeLineToFile(String fileName, 
	            String str,boolean append) 
			{ 
			try { 
			
				// Open given file in append mode. 
				BufferedWriter out = new BufferedWriter( 
						new FileWriter(fileName, append)); 
				out.write(str + "\n"); 
				out.close(); 
			} 
			catch (IOException e) { 
				System.out.println("exception occoured" + e); 
				} 
			}  
}
