package routines;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class writeSubSetFiles {

	public static void initIds (String idPath){
		String fileName = idPath+"ids.txt";
		createDirIfNotExists(idPath);
		writeLineToFile(fileName, "ID", false);
	}
	public static void writeIds(String idPath,String id){
		String fileName = idPath+"ids.txt";
		writeLineToFile(fileName, id, true);
		}
	
	private static void createDirIfNotExists(String dirPath){
    	if(!new File(dirPath).exists())
        {
            // CrÃ©er le dossier avec tous ses parents
    		System.out.println("Creating Directory for pos file ==> " + dirPath);
            new File(dirPath).mkdirs();
 
        }
    }
	
	private static void writeLineToFile(String fileName, 
	            String str,boolean append) 
			{ 
			try { 
			
				// Open given file in append mode. 
				BufferedWriter out = new BufferedWriter( 
						new FileWriter(fileName, append)); 
				out.write(str + "\n"); 
				out.close(); 
			} 
			catch (IOException e) { 
				System.out.println("exception occoured" + e); 
				} 
			}  

	public static Set<String> readIds (String idPath){
		File file = new File(idPath+"ids.txt"); 
		Set<String> ids = new HashSet<String>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(file));
			String id; 
			while ((id = br.readLine()) != null) 
				    ids.add(id);
			br.close();
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		return ids;
		
	}
}
